---
layout: post
---

In my first post on building a SaaS product, I mentioned the inspiration to use
Jekyll came from [Jordan O'Connor](https://jdnoc.com). His reasoning for using it
was that it allowed his product to be a lightweight and run pretty quickly. At
the time, I wasn't familiar with Jekyll, so I did some research of my own.

[Jekyll](https://jekyllrb.com/) is a software that allows you to create a static
website using html and markdown. It's written on top of Ruby, which may have been
the most difficult part for me. Installing it was a huge pain, but the benefits
of it on the other side of that struggle are completely worth it.

For context, static websites contain web pages with fixed content. Pages are coded in html and display the same information to every user. They don't require web
programming or databases. This means that a page on a static site is delivered
directly to the user's web browser, rather than being generated by a web
application. This is what makes them run so quickly.

As I mentioned above, installing Jekyll was the toughest part of learning the
software. I really wish I did a better job documenting what I had to go through
for it. The short version is that I used the Jekyll installation guide, asked questions on some Jekyll forums, and googled more than I've googled a single
topic in awhile.

Once I got through that, the next step was to buy a web domain and get web
hosting figured out. In the past, I had bought domains from GoDaddy and iPage. Those are fine, but they also charge for hosting, SSL certificates, etc. I was going for something cheap. I created a test website before starting my SaaS, using Github hosting. It was great because it was free, but I still had to pay for SSL. I then saw on twitter to use google domains with google firebase hosting. This was exactly what I was looking for. Google Domains has similar pricing to its competitors. Firebase hosting is free and includes SSL. Perfect. It was now
time to build.

The Jekyll step by step tutorial was pretty easy to use. It has 10 sections that
each build on the previous lessons. I've worked with html before a few times, but
there were definitely some new concepts for me.

**Liquid**

Liquid is a templating language with 3 main components: Objects, tags, and filters.
- Objects let you take predefined variables and show them as content on a page.
- Tags define logic and control flow for templates. IE. if/else logic.
- Filters change the output of any liquid objects. IE. make uppercase/lowercase.

Although the web pages are static, liquid gives you a lot of control and
customization when building a website.

**Front Matter**

In order for liquid to work, a Jekyll site needs to be using Front Matter.
Front matter is a snippet of [YAML](https://yaml.org/) that's placed between
two triple-dashed lines at the top of a html or markdown file. This is where
users can define object variables, page titles, and page layouts.

**Layouts**

Layouts are templates that can be used by any web page and wrap around page
content. Rather than having headers, footers, and non-content related html code
on every page, layouts let you build a template with all that stuff, and the
main content will change depending on what page a user is on.

**Sass**

I've worked with css before, but I've never heard of [Sass](https://sass-lang.com/). It's a css extension that has nesting rules, variables, similar to what I mentioned above, and a few others features. I started off my Jekyll site with sass because I thought it was required, but I realize I may need to change my approach. Since I'm using bootstrap (which I'll write a future post on) for my UI, things
may get complicated with the two frameworks.


Once I got through the Jekyll tutorial,  I build out this website, mattpupa.com,
just to get a basic understanding. One great thing about Jekyll is that it has a
local testing environment that allows you to serve your site on a local server.
This was very helpful for me understanding how things worked, as well as playing
with some sass elements.

Once I got the basics down, I started building a website for my SaaS.
There are a lot of resources out there that offer both free and paid jekyll
templates. I looked at both http://jekyllthemes.org/ and https://jekyllthemes.io/.
After looking around, I downloaded a free landing page theme. I was able to copy
most of the elements I wanted including the stylings. I changed some of the copy
and set up sign in authentication (will be covered in a later post).

For now, I'm leaving the website half finished. I want to make sure my SaaS is
completely functional end-to-end, before focusing on aesthetics. That means
having a working UI and a working back end. In my next post, I'll start talking about firebase as a backend for the SaaS.
